[{"id":"f6f2187d.f17ca8","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"43b4ad2d.c67ae4","type":"tab","label":"Data Service","disabled":false,"info":""},{"id":"2eac9894.31344","type":"subflow","name":"DataService Read Variables","info":"","category":"","in":[{"x":80,"y":300,"wires":[{"id":"aa91af03.561b5"}]}],"out":[{"x":760,"y":380,"wires":[{"id":"e7622a48.5c5c","port":1}]}],"env":[{"name":"variablesNames","type":"str","value":"","ui":{"label":{"en-US":"Variables Names"},"type":"input","opts":{"types":["str"]}}}],"color":"#0080FF","inputLabels":["Input dates"],"outputLabels":["Data"],"icon":"node-red/leveldb.png","status":{"x":840,"y":394,"wires":[{"id":"679b4ec7.dad508","port":0},{"id":"e7622a48.5c5c","port":2}]}},{"id":"51523531.c2c9cc","type":"ui_group","name":"Default","tab":"10fa4af.63fbeb5","order":3,"disp":true,"width":"12","collapse":false},{"id":"468e5708.c49398","type":"ui_group","name":"From","tab":"10fa4af.63fbeb5","order":1,"disp":true,"width":"6","collapse":false},{"id":"38746754.c77e4","type":"ui_group","name":"To","tab":"10fa4af.63fbeb5","order":2,"disp":true,"width":"6","collapse":false},{"id":"10fa4af.63fbeb5","type":"ui_tab","name":"DatetimePicker","icon":"dashboard","order":4,"disabled":false,"hidden":false},{"id":"564b9222.c9604c","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"3cc11d24.ff01a2","type":"comment","z":"f6f2187d.f17ca8","name":"WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work","info":"\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.","x":350,"y":80,"wires":[]},{"id":"26febc0a.143604","type":"function","z":"2eac9894.31344","name":"Create Token Request","func":"// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/TokenManagerService/oauth/token\";\n\n//set body\nmsg.payload = {\n    \"appName\": \"edgeappdataservice\",\n    \"appVersion\": \"1.1\",\n    \"hostTenant\": \"edge\",\n    \"userTenant\": \"edge\"\n    };\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\n// set auth header\nlet authStr = flow.get(\"dataserviceUser\") + \":\" + flow.get(\"dataservicePass\");\nlet basicOut = Buffer.from(authStr).toString('base64');\nmsg.headers['X-SPACE-AUTH-KEY'] = 'Basic ' + basicOut;\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":180,"y":120,"wires":[["66bddb0b.b2f8bc","9861416a.5c336"]]},{"id":"66bddb0b.b2f8bc","type":"http request","z":"2eac9894.31344","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":390,"y":120,"wires":[["e1065197.273a88"]]},{"id":"e1390ea7.653a8","type":"inject","z":"2eac9894.31344","name":"At Start","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":60,"wires":[["65fdfc19.192044"]]},{"id":"e1065197.273a88","type":"change","z":"2eac9894.31344","name":"","rules":[{"t":"set","p":"accessToken","pt":"flow","to":"payload.access_token","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":600,"y":120,"wires":[["a23a4676.76781"]]},{"id":"4cf996b6.8788e","type":"function","z":"2eac9894.31344","name":"Create Data Request","func":"// init msg\nlet outMsg = {\"headers\": {}};\n\n// set method\noutMsg.method = \"GET\";\n\n// get parameters for data query\nconst from = new Date(msg.from);\nconst to = new Date(msg.to);\n//const from = new Date('2021-10-10T10:00:00.000Z');\n//const to = new Date('2021-10-10T11:00:00.000Z');\nconst vars = flow.get(\"variablesIds\");\nconst variablesIds = Object.values(vars);\n\nlet route = \"/DataService/Data?variableIds=[\\\"\" + variablesIds.join(\"\\\",\\\"\") + \"\\\"]\";\nroute += \"&from=\" + from.toISOString();\nroute += \"&to=\"   + to.toISOString();\nroute += \"&order=Ascending\";\n//set url\noutMsg.url = flow.get(\"dataserviceUrl\") + route;\n\n// set token header\noutMsg.headers[\"authorization\"] = flow.get(\"accessToken\");\n\nreturn outMsg;\n    \n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":520,"y":260,"wires":[["fd7954a9.9ae5d"]]},{"id":"fd7954a9.9ae5d","type":"http request","z":"2eac9894.31344","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":710,"y":260,"wires":[["e7622a48.5c5c"]]},{"id":"a9fe8f1f.85ec6","type":"function","z":"2eac9894.31344","name":"Create Var Request","func":"// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"GET\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/DataService/Variables\";\n\n// set token header\nmsg.headers[\"authorization\"] = flow.get(\"accessToken\");\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":370,"y":180,"wires":[["eed3d8c1.b29598"]]},{"id":"eed3d8c1.b29598","type":"http request","z":"2eac9894.31344","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":570,"y":180,"wires":[["679b4ec7.dad508"]]},{"id":"679b4ec7.dad508","type":"function","z":"2eac9894.31344","name":"Get Variables Ids","func":"// create out message\nlet outMsg    = {\"payload\": null};\n\n// get names of variables to be extracted from Data Service app\nlet varName = env.get(\"variablesNames\");\nlet varNameArray = varName.split(\",\");\n\n// create object with {key:value} as {name:id} of variables\nlet vars = {};\nfor(i=0; i<varNameArray.length; i++){\n    vars[varNameArray[i]]  = []; \n}\n\n// iterate through readed tags\nfor (let i=0; i < varNameArray.length; i++){\n    \n    // iterate through selected ids\n    for(let j=0; j < msg.payload.variables.length; j++){\n    \n        // search for tagselectedTags[j]\n        if(varNameArray[i] == msg.payload.variables[j].variableName)\n        {\n            vars[varNameArray[i]] = msg.payload.variables[j].variableId;\n            // stop on first match, ids are uniques\n            break;\n        }\n    }\n}\n//node.send(vars);\nif (Object.keys(vars).length > 0) {\n    flow.set(\"variablesIds\", vars);\n    // set status\n    outMsg.payload = {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Connected and Configured for reading \" + Object.keys(vars).length + \" variables.\"\n    };\n} \nelse {\n    flow.set(\"variablesIds\", null);\n}\n\nreturn outMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":770,"y":180,"wires":[[]]},{"id":"a23a4676.76781","type":"switch","z":"2eac9894.31344","name":"accessToken?","property":"accessToken","propertyType":"flow","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":160,"y":180,"wires":[["a9fe8f1f.85ec6"]]},{"id":"aa91af03.561b5","type":"switch","z":"2eac9894.31344","name":"accessToken?","property":"accessToken","propertyType":"flow","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":240,"y":260,"wires":[["e5aee1e.8c99a2"]]},{"id":"e5aee1e.8c99a2","type":"switch","z":"2eac9894.31344","name":"variablesIds?","property":"variablesIds","propertyType":"flow","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":242,"y":300,"wires":[["8170c020.b7689"]]},{"id":"e7622a48.5c5c","type":"function","z":"2eac9894.31344","name":"Recursive Data Extraction","func":"let out1 = {};\nlet out2 = {};\nlet dataBuffer = flow.get(\"dataBuffer\") || {};\nlet variablesIds = flow.get(\"variablesIds\");\n\nif (Object.keys(dataBuffer).length == 0) {\n    flow.set(\"startTime\", new Date().getTime());\n    for(i=0; i<Object.keys(variablesIds).length; i++){\n        dataBuffer[Object.keys(variablesIds)[i]]  = []; \n    }\n}\n\nlet newDataBuffer = dataBuffer;\n\nfor(j=0; j<msg.payload.data.length; j++){\n    index = Object.values(variablesIds).indexOf(msg.payload.data[j].variableId);\n    newDataBuffer[Object.keys(variablesIds)[index]] = dataBuffer[Object.keys(variablesIds)[j]].concat(msg.payload.data[j].values);\n}\n\nflow.set(\"dataBuffer\", newDataBuffer);\n\nif (msg.payload.hasOwnProperty(\"hasMoreData\")) {\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Querying data in progress...\"\n    }};\n    out1.from = new Date(msg.payload.hasMoreData.from);\n    out1.to = new Date(msg.payload.hasMoreData.to);\n    return [out1, null, status];\n} else {\n    let status = {\"payload\": {\n      \"fill\": \"green\",\n      \"shape\": \"dot\",\n      \"text\": \"Query completed on \" + new Date().toISOString()\n    }};\n    out2.topic = env.get(\"variablesName\");\n    out2.payload = newDataBuffer;\n    flow.set(\"dataBuffer\", {});\n    out2.queryTime = new Date().getTime() - flow.get(\"startTime\");\n    return [null, out2, status]\n}","outputs":3,"noerr":0,"initialize":"","finalize":"","x":550,"y":382,"wires":[["4cf996b6.8788e"],[],[]]},{"id":"c1130cc1.334a38","type":"function","z":"2eac9894.31344","name":"Create User","func":"// init msg\nmsg = {\"headers\": {}};\n\n// set method\nmsg.method = \"POST\";\n\n//set url\nmsg.url = flow.get(\"dataserviceUrl\") + \"/TokenManagerService/users\";\n\n//set body\nmsg.payload = {\n      userName: flow.get(\"dataserviceUser\"),\n      passWord: flow.get(\"dataservicePass\"),\n      familyName: \"myFamily\" + flow.get(\"dataserviceUser\"),\n      givenName: flow.get(\"dataserviceUser\"),\n      email: flow.get(\"dataserviceUser\") + \"@myemail.com\",\n      roles: [\n        {\n          application: \"edgeappdataservice\",\n          role: \"admin\"\n        }]};\n        \n// set headers\nconst strJson = JSON.stringify(msg.payload);\nconst lenJson = Buffer.byteLength(strJson);\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Content-Length'] = lenJson;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":490,"y":60,"wires":[["c1f6e182.4aa998"]]},{"id":"c1f6e182.4aa998","type":"http request","z":"2eac9894.31344","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":670,"y":60,"wires":[["26febc0a.143604"]]},{"id":"8170c020.b7689","type":"switch","z":"2eac9894.31344","name":"dateFromPicked?","property":"from","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":247,"y":340,"wires":[["28dfc3b6.1ad4b4"]]},{"id":"28dfc3b6.1ad4b4","type":"switch","z":"2eac9894.31344","name":"dateToPicked?","property":"to","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":249,"y":380,"wires":[["4cf996b6.8788e"]]},{"id":"65fdfc19.192044","type":"change","z":"2eac9894.31344","name":"url, user, pass","rules":[{"t":"set","p":"dataserviceUrl","pt":"flow","to":"http://edgeappdataservice:4203","tot":"str"},{"t":"set","p":"dataserviceUser","pt":"flow","to":"nodeUser","tot":"str"},{"t":"set","p":"dataservicePass","pt":"flow","to":"nodePass","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":300,"y":60,"wires":[["c1130cc1.334a38"]]},{"id":"9861416a.5c336","type":"debug","z":"2eac9894.31344","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":540,"wires":[]},{"id":"f961a0cc.bd3458","type":"subflow:2eac9894.31344","z":"43b4ad2d.c67ae4","name":"","env":[{"name":"variablesNames","value":"Sinus","type":"str"}],"x":560,"y":320,"wires":[["42929859.76c1b8","333a51b4.73052e","e6782a5d.015998"]]},{"id":"cbb42495.702658","type":"inject","z":"43b4ad2d.c67ae4","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":100,"y":320,"wires":[["1cd28d54.47c24b"]]},{"id":"1cd28d54.47c24b","type":"change","z":"43b4ad2d.c67ae4","name":"getDateFromDashboard","rules":[{"t":"set","p":"from","pt":"msg","to":"from","tot":"global"},{"t":"set","p":"to","pt":"msg","to":"to","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":310,"y":320,"wires":[["f961a0cc.bd3458"]]},{"id":"d5549daf.02d9d","type":"ui_chart","z":"43b4ad2d.c67ae4","name":"","group":"51523531.c2c9cc","order":1,"width":0,"height":0,"label":"Production Trend","chartType":"line","legend":"true","xformat":"dd HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"-30","ymax":"30","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1c84ce","#ed2c2f","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":890,"y":360,"wires":[["efcc6bd8.170618"]]},{"id":"333a51b4.73052e","type":"function","z":"43b4ad2d.c67ae4","name":"Create chart msg","func":"// create base out message\nlet outMsg = {payload:[{}]};\nlet outSeries = [];\nlet tags = Object.keys(msg.payload);\n\nfor(i=0;i<tags.length;i++){\n    outSeries.push(tags[i]);\n}\n\n// create chart properties\noutMsg.payload[0].series = outSeries;\noutMsg.payload[0].labels = [\"\"];\noutMsg.payload[0].data = [];\n\n// create time series\nfor(i=0;i<tags.length;i++){\n    let data = Object.values(msg.payload)[i];\n    let name = Object.keys(msg.payload)[i];\n    outMsg.payload[0].data[i] = [];\n    for (j=0;j<data.length;j++){\n        let ts = new Date(data[j].timestamp).getTime();\n        outMsg.payload[0].data[i].push({\"x\": ts, \"y\": data[j].value});  \n    }\n}\n\nreturn outMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":890,"y":320,"wires":[["d5549daf.02d9d"]],"info":"The aim of this node is to prepare the data received from \"DataService Read Variable\" node, in order to visualize them into a dedicated dashboard.\n\nThe time series data format will be the following:\n\n[{\n\"series\": [\"VarA\", \"VarB\", \"VarC\"],\n\"data\": [\n    [{ \"x\": \"20/10/2021 20:50:50\", \"y\": 5 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 6 },\n     { \"x\": \"20/10/2021 20:50:50\", \"y\": 7 }\n    ],\n    ...,\n    [{ \"x\": \"20/10/2021 20:51:50\", \"y\": 8 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 9 },\n     { \"x\": \"20/10/2021 20:51:50\", \"y\": 10 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n\nThe graph in the dasboard will show the timestamps on the x-axis and the values of the tags on the y-axis."},{"id":"6d7cd2c4.88ca5c","type":"comment","z":"43b4ad2d.c67ae4","name":"Show on UI","info":"","x":870,"y":280,"wires":[]},{"id":"2f3e788a.041378","type":"ui_button","z":"43b4ad2d.c67ae4","name":"","group":"51523531.c2c9cc","order":2,"width":0,"height":0,"passthru":false,"label":"Get Data","tooltip":"","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"","x":100,"y":360,"wires":[["1cd28d54.47c24b"]]},{"id":"a925d5ad.bb9f38","type":"change","z":"43b4ad2d.c67ae4","name":"","rules":[{"t":"set","p":"from","pt":"global","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":700,"y":140,"wires":[["20042b0f.55fb34"]]},{"id":"347f3cc9.4e69e4","type":"change","z":"43b4ad2d.c67ae4","name":"","rules":[{"t":"set","p":"to","pt":"global","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":180,"wires":[["d1db31a9.23324"]]},{"id":"cac951ed.0d5f6","type":"inject","z":"43b4ad2d.c67ae4","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":110,"y":160,"wires":[["46b24162.eb976"]]},{"id":"12a7df76.f47e21","type":"ui_date_picker","z":"43b4ad2d.c67ae4","name":"","label":"From","group":"468e5708.c49398","order":1,"width":0,"height":0,"passthru":true,"topic":"from","x":510,"y":140,"wires":[["a925d5ad.bb9f38"]]},{"id":"7baafcf0.683e04","type":"ui_date_picker","z":"43b4ad2d.c67ae4","name":"","label":"to","group":"38746754.c77e4","order":1,"width":0,"height":0,"passthru":true,"topic":"to","x":510,"y":180,"wires":[["347f3cc9.4e69e4"]]},{"id":"46b24162.eb976","type":"function","z":"43b4ad2d.c67ae4","name":"Default time range","func":"let out1 = {\"payload\": new Date(msg.payload - 1000*60*60*1)};\nlet out2 = {\"payload\": new Date(msg.payload)};\n\nreturn [out1, out2];","outputs":2,"noerr":0,"initialize":"","finalize":"","x":310,"y":160,"wires":[["12a7df76.f47e21"],["7baafcf0.683e04"]]},{"id":"20042b0f.55fb34","type":"debug","z":"43b4ad2d.c67ae4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":910,"y":140,"wires":[]},{"id":"d1db31a9.23324","type":"debug","z":"43b4ad2d.c67ae4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":910,"y":180,"wires":[]},{"id":"eb343839.c7e898","type":"comment","z":"43b4ad2d.c67ae4","name":"Select time interval","info":"","x":110,"y":120,"wires":[]},{"id":"633f4d2b.74e574","type":"comment","z":"43b4ad2d.c67ae4","name":"Extract data from Data Service App","info":"","x":160,"y":280,"wires":[]},{"id":"8f3f7314.92199","type":"comment","z":"43b4ad2d.c67ae4","name":"Export CSV file","info":"","x":880,"y":460,"wires":[]},{"id":"72dae201.a802ac","type":"comment","z":"43b4ad2d.c67ae4","name":"Variables of interest to be defined in this node","info":"","x":610,"y":280,"wires":[]},{"id":"a620499c.ced4a8","type":"csv","z":"43b4ad2d.c67ae4","name":"","sep":",","hdrin":"","hdrout":"once","multi":"one","ret":"\\n","temp":"","skip":"0","strings":true,"include_empty_strings":"","include_null_values":"","x":850,"y":540,"wires":[["aab58003.12258"]]},{"id":"42929859.76c1b8","type":"function","z":"43b4ad2d.c67ae4","name":"CSV data arrangement","func":"let data = {\"timestamp\": []};\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    let variable = Object.values(msg.payload)[i];\n    for (j=0;j<variable.length;j++){\n        let newTs = new Date(variable[j].timestamp).getTime()\n        if(data.timestamp.indexOf(newTs) == -1){\n            data.timestamp.push(newTs);  \n        }\n    }\n}\n\ndata.timestamp.sort((a,b)=>a-b).map((el) => {return new Date(el)});\n\nfor(k=0;k<data.timestamp.length;k++){\n    data.timestamp[k] = new Date(parseInt(data.timestamp[k])).toISOString();\n}\n\nfor(i=0;i<Object.keys(msg.payload).length;i++){\n    data[Object.keys(msg.payload)[i]] = new Array(data.timestamp.length).fill(null);\n    let variable = Object.values(msg.payload)[i];\n    for(j=0;j<variable.length;j++){\n        let index = data.timestamp.indexOf(variable[j].timestamp);\n        if(index > -1){\n            data[Object.keys(msg.payload)[i]][index] = variable[j].value\n        }    \n    }\n}\n\nlet buffer = [];\n// Go through all data elements and organize them as [{a: \"\", b: \"\"}, {a: \"\", b: \"\"},...,{a: \"\", b: \"\"}]\nfor(i=0;i<data.timestamp.length;i++){\n    let newRow = {\"timestamp\": data.timestamp[i]};\n    let columns = Object.keys(msg.payload);\n    for(j=0;j<columns.length;j++){\n        newRow[Object.keys(msg.payload)[j]] = data[Object.keys(msg.payload)[j]][i];\n    }\n    buffer.push(newRow);\n}\n\n// Define CSV columns name\nmsg.columns = Object.keys(data).join(\",\");\nmsg.payload = buffer;\nmsg.topic = env.get(\"variablesName\");\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":500,"wires":[["a620499c.ced4a8"]],"info":"The aim of this node is to format the data recevied from \"DataService Read Variables\" node, in order to create and save a CSV file with all the datapoints extracted from the Data Service database.\n\nThe CSV file format will be the following:\n\n|timestamp|VarA|VarB|...|VarC|\n|.........|....|....|...|....|\n|.........|....|....|...|....|\n|.........|....|....|...|....|"},{"id":"6b63cb14.ada6f4","type":"comment","z":"43b4ad2d.c67ae4","name":"DATA SERVICE APPLICATION EXAMPLE","info":"","x":180,"y":60,"wires":[]},{"id":"aab58003.12258","type":"file","z":"43b4ad2d.c67ae4","name":"write to file","filename":"/home/nodered/node-red-home/_report/csvdataextract.csv","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":990,"y":540,"wires":[["b5defd29.bf15b"]],"info":"Save a CSV with filename **csvdataextract.csv** containing all the datapoints extracted from Data Service application."},{"id":"b5defd29.bf15b","type":"debug","z":"43b4ad2d.c67ae4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":850,"y":580,"wires":[]},{"id":"efcc6bd8.170618","type":"debug","z":"43b4ad2d.c67ae4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":850,"y":400,"wires":[]},{"id":"e6782a5d.015998","type":"debug","z":"43b4ad2d.c67ae4","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":650,"y":440,"wires":[]}]